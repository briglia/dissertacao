#!/bin/sh

programs="big_alloc_memset big_alloc_no_memset small_alloc_memset small_alloc_no_memset big_small_alloc_memset big_small_alloc_no_memset small_big_alloc_memset small_big_alloc_no_memset alternated_alloc_memset alternated_alloc_no_memset
big_free_memset big_free_no_memset small_free_memset small_free_no_memset big_small_free_memset big_small_free_no_memset
small_big_free_memset small_big_free_no_memset alternated_free_memset alternated_free_no_memset"

iterations=120

nr=0
graph_dir="graphics"


if [ ! -d $graph_dir ]; then
    mkdir $graph_dir
fi

function plot_graph {
    
    cd $5

    if [ "$4" = 2 ]; then
	mem="vm"
    elif [ "$4" = 3 ]; then
	mem="rss"
    fi
    
    plot_file=plot-$mem-$1-$2-$3

    if [ -e $plot_file ]; then
	rm $plot_file
    fi

    echo "set xlabel \"Unidade de tempo\" " >> $plot_file
    echo "set ylabel \"Páginas alocadas\" " >> $plot_file
    echo "plot \""$1.dat"\" using 1:"$4" title '"$1"' with points, \""$2.dat"\" using 1:"$4" title '"$2"' with points, \""$3.dat"\" using 1:"$4" title '"$3"' with points"  >> $plot_file
    echo "set terminal png" >> $plot_file
    echo "set output \""$mem-$1-$2-$3.png"\"" >> $plot_file
    echo "replot" >> $plot_file
    
    gnuplot $plot_file
    
    cd $HOME/memory
}


function generate_graph {
    plot_graph ${app[0]} ${app[1]} ${app[2]} 2 $1
    plot_graph ${app[0]} ${app[1]} ${app[2]} 3 $1
    plot_graph ${app[3]} ${app[4]} ${app[5]} 2 $1
    plot_graph ${app[3]} ${app[4]} ${app[5]} 3 $1
    plot_graph ${app[6]} ${app[7]} ${app[8]} 2 $1
    plot_graph ${app[6]} ${app[7]} ${app[8]} 3 $1
}

case "$1" in
    data)
	for j in $programs; do
	    echo $nr..:$j started 
	    nr=$[$nr+1]
	    $( ./$j )&
	    sleep 1
	    #if [ $j == "firefox" ]; then
		#pid=$( pidof $j-bin )
	    #else
	    pid=$( pidof $j )
	    #echo "pid: "$pid
	    #fi
	    if [ -e $graph_dir/$j.dat ]; then
		rm $graph_dir/$j.dat
	    fi
	    ./analyse $pid $graph_dir/$j.dat
	    #for i in $( seq 1 $iterations ); do
		#sleep 1
		#data=$( cat /proc/$pid/statm | awk '{print $1,$2}' )
		#echo $i $data >> $graph_dir/$j.dat
	    #done
	done
	;;
    graph)
	for j in $programs; do
	    app[$nr]=$j 
	    nr=$[$nr+1]
	done
	generate_graph $graph_dir
	;;
    post_process)
	dir=tmp_$( date +%d:%m:%Y-%T-%N )
	if [ ! -d $dir ]; then
	    mkdir $dir
	fi
	for j in $programs; do
	    app[$nr]=$j 
	    nr=$[$nr+1]

	    i=0
	    vm_str=$( cat $graph_dir/$j.dat | awk '{print $2}' )
	    rss_str=$( cat $graph_dir/$j.dat | awk '{print $3}' )
	    for value in $vm_str; do
		vm[$i]=$value
		i=$[$i+1]
	    done

	    i=0
	    for value in $rss_str; do
		rss[$i]=$value
		i=$[$i+1]
	    done

	    size=$[${#vm[*]}-1]
	    vm_total=0;
	    rss_total=0;
	    
	    for i in $( seq 1 $size ); do
		vm_diff[$i]=$[ ${vm[$i]} - ${vm[$i-1]} ]
		rss_diff[$i]=$[ ${rss[$i]} - ${rss[$i-1]} ]

		vm_total=$[ ${vm_diff[$i]} + $vm_total ]		
		rss_total=$[ ${rss_diff[$i]} + $rss_total ]
		
		#echo $i $vm_total $rss_total >> $dir/$j.dat
		echo $i ${vm_diff[$i]} ${rss_diff[$i]} >> $dir/$j.dat
	    done
	done
	generate_graph $dir
	;;
    clean_tmp)
	rm -r tmp_*
	;;
    teste)
	dir=tmp_$( date +%d/%m/%Y-%T-%N )
	echo $dir
	;;
    *)
	echo "Usage: {data|graph|post_process}"
	exit 1
	;;
esac

echo "Finished!!!"