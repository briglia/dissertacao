#!/usr/bin/env python

import sys, string, os, time, popen2
import mm

programs = []

if (len(sys.argv) == 3):

    # Get application name
    app_name = sys.argv[1]
    
    if app_name == "gpdf":
        programs.append("gpdf_1")
        programs.append("gpdf_2")
        programs.append("gpdf_3")
    elif app_name == "gthumb":
        programs.append("gthumb_1")
    elif app_name == "galeon":
        programs.append("galeon_1")
        programs.append("galeon_2")
        programs.append("galeon_3")
        programs.append("galeon_4")
    elif app_name == "totem":
        programs.append("totem_1")
    elif app_name == "gedit":
        programs.append("gedit_1")
        programs.append("gedit_2")
        programs.append("gedit_3")
        programs.append("gedit_4")
        
    # Run the use case and collect the data
    if sys.argv[2] == "data":
        os.chdir(app_name)
        print "Enter to %s" % os.getcwd()
        i = 0
        while i < len(programs):
            print "running \'./main_%s.py %d\'" % (app_name, i+1)
            os.system("./main_%s.py %d" % (app_name, i+1))
            time.sleep(3)
            i += 1
        os.chdir("..")
        print "Back to %s" % os.getcwd()

    # Generate the graphic of memory consumption
    elif sys.argv[2] == "graph":
        graph_dir="%s/graphics" % app_name
        if not os.access(graph_dir, os.F_OK):
            os.mkdir(graph_dir)
        
        # Number of programs 
        size = len(programs)
        
        # Number of programs are divisible by 2
        if (size % 2) == 0:
            for i in range(0, size, 2):
                mm.plot_graph([programs[i], programs[i+1]],
                                  "rss",
                                  graph_dir)
                mm.plot_graph([programs[i], programs[i+1]],
                                  "vm",
                                  graph_dir)
        
        # Number of programs are divisible by 3
        elif (size % 3) == 0:
            for i in range(0, size, 3):
                mm.plot_graph([programs[i], programs[i+1], programs[i+2]],
                                  "rss",
                                  graph_dir)
                mm.plot_graph([programs[i], programs[i+1], programs[i+2]],
                                  "vm",
                                  graph_dir)
        
        # Otherwise access each program at time
        else:
            for i in range(0, size):
                mm.plot_graph([programs[i]],
                                  "rss",
                                  graph_dir)
                mm.plot_graph([programs[i]],
                                  "vm",
                                  graph_dir)

    # Format the collected data in the non duplicate
    # tuple (memory, velocity, acceleration)
    elif sys.argv[2] == "post_process":
        graph_dir = app_name
        for program in programs:
            read_from = "%s/%s.dat" % (graph_dir, program)
            write_to = "%s/neural_input_%s.dat" % (graph_dir, program)
            mm.calculate_rate(read_from, write_to)
    
    # Remove the dat file generated by "post_process" action
    elif sys.argv[2] == "undo_post_process":
        graph_dir = app_name
        for program in programs:
            dat_file = "%s/neural_input_%s.dat" % (graph_dir, program)
            os.remove(dat_file)
    
    # Remove graphics directory
    elif sys.argv[2] == "clean":
        graph_dir="%s/graphics" % app_name
        files = os.listdir(graph_dir)
        os.chdir(graph_dir)
        for each_file in files:
            os.remove(each_file)
        os.chdir("..")
        os.rmdir("graphics")
        os.chdir("..")
    
    else:
        print "Verify if you have informed the correct arguments"
else:
    print "Usage: ./run_app_analyze.py [app_name] [data|graph|post_process|undo_post_process|clean]"
